
group 'rfx'
version '1.0'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'

sourceCompatibility = 1.8

version = '1.0'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile (
		'com.google.code.gson:gson:2.8.5'     		
		,'log4j:log4j:1.2.17'
		,'org.jsoup:jsoup:1.14.3'				
		,'org.apache.commons:commons-lang3:3.3.2'
		,'commons-net:commons-net:3.6'    		
		,'commons-io:commons-io:2.6'
		,'redis.clients:jedis:2.10.2'
    		 	
    	//deps of data util
    	,'commons-dbcp:commons-dbcp:1.4'	 	
    	,'javax.inject:javax.inject:1'    	
		,'org.aspectj:aspectjrt:1.8.7'
		,'org.aspectj:aspectjweaver:1.8.7'		
		,'org.reflections:reflections:0.9.10'
		
												    		 	
		,'org.springframework:spring-context:4.3.14.RELEASE'
		,'org.springframework:spring-jdbc:4.3.14.RELEASE'
		,'org.springframework:spring-aop:4.3.14.RELEASE'
		,'org.postgresql:postgresql:42.2.1'
		,'mysql:mysql-connector-java:6.0.6'
    )
    testCompile (
    	'junit:junit:4.12' 
    )
}

ext.rfxDataUtilManifest = manifest {
   attributes ('Implementation-Title': 'rfx.core.data.util', 
        			'Implementation-Version': version ,        			
        			'Class-Path' : getClasspathStringJars() )
}


// ------------ tasks for build src ---------------------


def getClasspathStringJars() {
	def baseFolder = 'deps/'
    def fileNames = []
    configurations.compile.each { File file -> fileNames.add(baseFolder + file.name) }
    
    def classpath = fileNames.join(" ; ")    
    return '. ; ' + classpath + ' ; '
}

jar {	 
   dependsOn classes
    from(sourceSets.main.output) {
        include "**"
    }    
    baseName = 'rfx-data-util'
    manifest = project.manifest {
        from rfxDataUtilManifest
    }
}

task buildLibrary(type: Jar) {	
	dependsOn classes
    from(sourceSets.main.output) {
        include "**"
    }    
    baseName = 'rfx-data-util'
    manifest = project.manifest {
        from rfxDataUtilManifest
    }
}




